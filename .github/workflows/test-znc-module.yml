name: Test ZNC Module

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Add deb-src entries and update
        run: |
          sudo sh -c 'echo "deb http://archive.ubuntu.com/ubuntu $(lsb_release -cs) main restricted universe multiverse
          deb-src http://archive.ubuntu.com/ubuntu $(lsb_release -cs) main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu $(lsb_release -cs)-updates main restricted universe multiverse
          deb-src http://archive.ubuntu.com/ubuntu $(lsb_release -cs)-updates main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu $(lsb_release -cs)-backports main restricted universe multiverse
          deb-src http://archive.ubuntu.com/ubuntu $(lsb_release -cs)-backports main restricted universe multiverse
          deb http://archive.ubuntu.com/ubuntu $(lsb_release -cs)-security main restricted universe multiverse
          deb-src http://archive.ubuntu.com/ubuntu $(lsb_release -cs)-security main restricted universe multiverse" >> /etc/apt/sources.list'
          sudo apt-get update -qq 2>&1

      - name: Install dependencies
        run: |
          echo "Updating package lists..."
          UPDATE_OUTPUT=$(sudo apt-get update 2>&1) 
          echo "$UPDATE_OUTPUT" | grep -E '^[[:space:]]*Get|^Hit|^Fetched|^Reading|^Building' || true

          echo "Installing build dependencies for ZNC..."
          BUILD_DEP_OUTPUT=$(sudo apt-get build-dep -y znc znc-dev 2>&1)
          echo "$BUILD_DEP_OUTPUT" | grep -E '^[[:space:]]*The following NEW packages will be installed|^Fetched|^Reading|^Building' || true

          echo "Installing required packages: g++, make, git..."
          INSTALL_OUTPUT=$(sudo apt-get install -y g++ make git 2>&1)
          echo "$INSTALL_OUTPUT" | grep -E '^[[:space:]]*The following NEW packages will be installed|^Fetched|^Reading|^Building' || true

          echo "All dependencies are successfully installed."
      - name: Install znc latest
        run: |
          echo "Cloning the ZNC repository..."
          git clone https://github.com/znc/znc.git --recursive /tmp/znc
          cd /tmp/znc

          echo "Building ZNC..."
          mkdir build
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install

      - name: Build ZNC module
        run: |
          echo "Building the ZNC module..."
          znc-buildmod -v fish.cpp
          mkdir -p /tmp/znc-data/modules
          cp fish.so /tmp/znc-data/modules

      - name: Create ZNC config
        run: |
          echo "Creating ZNC SSL certificate..."
          mkdir -p /home/runner/.znc
          znc --makepem
          echo "Creating ZNC configuration..."
          mkdir -p /tmp/znc-data/configs
          cat <<EOL > /tmp/znc-data/configs/znc.conf
          // WARNING
          //
          // Do NOT edit this file while ZNC is running!
          // Use webadmin or *controlpanel instead.
          //
          // Altering this file by hand will forfeit all support.
          //
          // But if you feel risky, you might want to read help on /znc saveconfig and /znc rehash.
          // Also check https://wiki.znc.in/Configuration

          AnonIPLimit = 10
          AuthOnlyViaModule = false
          ConfigWriteDelay = 0
          ConnectDelay = 5
          HideVersion = false
          LoadModule = corecaps
          LoadModule = webadmin
          MaxBufferSize = 500
          ProtectWebSessions = true
          SSLCertFile = /home/runner/.znc/znc.pem
          SSLDHParamFile = /home/runner/.znc/znc.pem
          SSLKeyFile = /home/runner/.znc/znc.pem
          ServerThrottle = 30
          Version = 1.10.x

          <Listener listener0>
                  AllowIRC = true
                  AllowWeb = true
                  IPv4 = true
                  IPv6 = false
                  Port = 65500
                  SSL = true
                  URIPrefix = /
          </Listener>

          <User znc-fish>
                  Admin = true
                  AltNick = znc-fish_
                  AppendTimestamp = false
                  AuthOnlyViaModule = false
                  AutoClearChanBuffer = true
                  AutoClearQueryBuffer = true
                  ChanBufferSize = 50
                  DenyLoadMod = false
                  DenySetBindHost = false
                  DenySetCTCPReplies = false
                  DenySetIdent = false
                  DenySetNetwork = false
                  DenySetQuitMsg = false
                  DenySetRealName = false
                  Ident = znc-fish
                  JoinTries = 10
                  LoadModule = chansaver
                  LoadModule = controlpanel
                  LoadModule = fish
                  MaxJoins = 0
                  MaxNetworks = 1
                  MaxQueryBuffers = 50
                  MultiClients = true
                  Nick = znc-fish
                  NoTrafficTimeout = 180
                  PrependTimestamp = true
                  QueryBufferSize = 50
                  QuitMsg = %znc%
                  RealName = ZNC - https://znc.in
                  StatusPrefix = *
                  TimestampFormat = [%H:%M:%S]

                  <Network targate>
                          FloodBurst = 9
                          FloodRate = 2.00
                          IRCConnectEnabled = true
                          JoinDelay = 0
                          LoadModule = simple_away
                          Server = irc.targate.xyz +7575 !.76b2ubASV%/82thW(Z
                          TrustAllCerts = false
                          TrustPKI = true
                          TrustedServerFingerprint = e1:3b:bd:59:ea:d7:24:b4:45:93:18:68:4e:73:1b:62:32:d2:92:53:b7:51:9c:0d:e7:77:a7:07:bf:4c:4a:26

                          <Chan #TVHeadNet>
                          </Chan>
                  </Network>

                  <Pass password>
                          Hash = $argon2id$v=19$m=6144,t=6,p=1$ck8ybDR6IXVQcEw7YnJoZCtRenQ$XdZEPb/HCnfm0yw8P0XwmFH75tJLjI6SMXriwoO+a1Q
                          Method = Argon2id
                  </Pass>
          </User>
          EOL

      - name: Run tests
        run: |
          echo "Starting ZNC for tests..."
          znc --datadir /tmp/znc-data --debug &
          ZNC_PID=$!
          sleep 5  # Attendre que ZNC soit lanc√©
          echo "Running tests..."
          # Ajoutez vos commandes de test ici
          kill $ZNC_PID
          echo "Tests completed. ZNC stopped."
