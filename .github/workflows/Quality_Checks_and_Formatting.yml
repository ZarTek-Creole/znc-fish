name: C++ Quality Checks and Formatting

on:
  push:
    branches:
      master
  pull_request:
    branches:
      master

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        run-tests: [true, false]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup environment variables
        run: |
          echo "GITHUB_REF=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "GITHUB_REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV

      - name: Install dependencies & compile
        run: |
          sudo apt update && sudo apt install -y \
            git \
            curl \
            wget \
            xz-utils \
            build-essential \
            cmake \
            libboost-all-dev \
            python3-pip

          wget https://github.com/google/googletest/archive/refs/tags/release-1.15.0.tar.gz && \
            tar zxvf release-1.15.0.tar.gz && rm release-1.15.0.tar.gz && \
            cd googletest-release-1.15.0 && mkdir build && cd build && \
            cmake .. && make -j$(nproc) && sudo make install

          pip3 install --upgrade setuptools wheel virtualenv
          python3 -m virtualenv env
          source env/bin/activate && pip install -U flake8 pytest coverage twine mock pyfakefs[unittest]

          if [[ ${{ matrix.compiler }} == 'gcc' ]]; then
            CC=gcc CXX=g++ cmake -H$GITHUB_WORKSPACE -B$GITHUB_WORKSPACE/build -DCMAKE_BUILD_TYPE=Release -DGOOGLETEST_DIR=$GITHUB_WORKSPACE/build/googlemock -DBoost_NO_SYSTEM_PATHS=ON
            cmake --build $GITHUB_WORKSPACE/build
          elif [[ ${{ matrix.compiler }} == 'clang' ]]; then
            CC=clang CXX=clang++ cmake -H$GITHUB_WORKSPACE -B$GITHUB_WORKSPACE/build -DCMAKE_BUILD_TYPE=Release -DGOOGLETEST_DIR=$GITHUB_WORKSPACE/build/googlemock -DBoost_NO_SYSTEM_PATHS=ON
            cmake --build $GITHUB_WORKSPACE/build
          else
            echo "Invalid compiler specified."
            exit 1
          fi

      - name: Test
        if: matrix.run-tests == 'true'
        run: |
          if [[ ${{ matrix.compiler }} == 'gcc' ]]; then
            CTEST_OUTPUT_ON_FAILURE=TRUE ctest -C Release --extra-verbose
          elif [[ ${{ matrix.compiler }} == 'clang' ]]; then
            CTEST_OUTPUT_ON_FAILURE=TRUE ctest -C Release --extra-verbose
          else
            echo "Invalid compiler specified."
            exit 1
          fi

          ctest -C Release --output-json > test-results/${{ runner.os }}-${{ matrix.compiler }}.json

      - name: Format Code
        run: |
          if [[ -x "$(command -v clang-format)" ]]; then
            clang-format -i -style=file $(find . -type f \( -name "*.cpp" -or -name "*.hpp" \))
          elif command -v astyle &> /dev/null; then
            astyle --options=au.astylerc --recursive .
          else
            echo "ClangFormat or AStyle not found."
          fi

      - name: Static Analysis using CPPLINT
        run: |
          cpplint **/*.cpp --filter=-legal/copyright,-readability/casting

      - name: Generate Report
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: |
            report.md
            junit.xml
            coverage.xml
            test-results/**

      - name: Notify of results in comment
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, getOctokit } = require('@actions/github');
            const octokit = getOctokit(context.token);
            const payload = {
              title: 'Code quality check summary',
              body: `The quality checks have been completed. See the attached artifacts for details.`,
            };
            octokit.rest.issues.createComment({
              issue_number: context.issue.number || context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: payload.body,
            });
